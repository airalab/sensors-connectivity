#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ROS
import rospy

# Standart, System and Third party
from threading import Timer
import sentry_sdk
import yaml

from stations import COMStation, TCPStation, HTTPStation
from feeders import LuftdatenFeeder, RobonomicsFeeder, DatalogFeeder


class WorkerNode:
    """The main class that initialize stations and feeders and launches the loop."""

    def __init__(self):
        # rospy.init_node("worker", log_level=rospy.DEBUG)
        rospy.init_node("worker")
        rospy.loginfo("Launching worker node...")

        self.config = self._read_configuration()
        rospy.logdebug(self.config)

        self.interval = self.config["general"]["publish_interval"]

        sentry_sdk.init(self.config["dev"]["sentry"])

        self.stations = self._populate_stations()
        self.feeders = self._populate_feeders()

        rospy.loginfo("Worker node is launched")

    def _read_configuration(self) -> dict:
        """Internal method

        Loads configuration.
        """
        config_path = rospy.get_param("~config")
        rospy.logdebug(config_path)

        try:
            with open(config_path) as f:
                content = f.read()
                config = yaml.load(content, Loader=yaml.FullLoader)
                rospy.logdebug(f"Configuration dict: {content}")
                return config
        except Exception as e:
            while True:
                rospy.logerr("Configuration file is broken or not readable!")
                rospy.logerr(e)
                rospy.sleep(5)

    def _populate_stations(self) -> []:
        """Initialize stations

        If you make a new one, add initialization here.
        Don't forget to append an instance to `s`
        """
        s = []
        if self.config["comstation"]["enable"]:
            s.append(COMStation(self.config))

        if self.config["tcpstation"]["enable"]:
            s.append(TCPStation(self.config))

        if self.config["httpstation"]["enable"]:
            s.append(HTTPStation(self.config))

        return s

    def _populate_feeders(self) -> []:
        """Initialize feeders

        If you make a new one, add initialization here.
        """
        f = [LuftdatenFeeder(self.config),
             RobonomicsFeeder(self.config),
             DatalogFeeder(self.config)]

        return f

    def spin(self):
        def send_result():
            """Main loop"""
            rospy.loginfo("Starting process...")

            for s in self.stations:
                station_data = s.get_data()
                rospy.loginfo(f"{s.version}: {station_data}")

                for f in self.feeders:
                    f.feed(station_data)

            Timer(self.interval, send_result).start()

        send_result()
        rospy.spin()


if __name__ == "__main__":
    WorkerNode().spin()
